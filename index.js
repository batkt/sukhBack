const express = require("express");
const app = express();
const http = require("http");
const cors = require("cors");
const server = http.Server(app);
const io = require("socket.io")(server, {
  pingTimeout: 20000,
  pingInterval: 10000,
});
const dotenv = require("dotenv");
const cron = require("node-cron");

dotenv.config({ path: "./tokhirgoo/tokhirgoo.env" });

const baiguullagaRoute = require("./routes/baiguullagaRoute");
const ajiltanRoute = require("./routes/ajiltanRoute");
const orshinSuugchRoute = require("./routes/orshinSuugchRoute");
const licenseRoute = require("./routes/licenseRoute");
const nekhemjlekhiinZagvarRoute = require("./routes/nekhemjlekhiinZagvarRoute");
const bankniiGuilgeeRoute = require("./routes/bankniiGuilgeeRoute");
const gereeRoute = require("./routes/gereeRoute");
const dansRoute = require("./routes/dansRoute");
const gereeniiZagvarRoute = require("./routes/gereeniiZagvarRoute");
const nekhemjlekhRoute = require("./routes/nekhemjlekhRoute");
const nekhemjlekhCronRoute = require("./routes/cronScheduleRoute");
const qpayRoute = require("./routes/qpayRoute");
const ebarimtRoute = require("./routes/ebarimtRoute");

const { db } = require("zevbackv2");

const aldaaBarigch = require("./middleware/aldaaBarigch");
const nekhemjlekhiinZagvar = require("./models/nekhemjlekhiinZagvar");
const nekhemjlekhController = require("./controller/nekhemjlekhController");
const NekhemjlekhCron = require("./models/cronSchedule");

process.setMaxListeners(0);
process.env.UV_THREADPOOL_SIZE = 20;

server.listen(8084);

process.env.TZ = "Asia/Ulaanbaatar";
app.set("socketio", io);
app.use(cors());
app.use(
  express.json({
    limit: "50mb",
    extended: true,
  })
);

db.kholboltUusgey(
  app,
  "mongodb://admin:Br1stelback1@127.0.0.1:27017/amarSukh?authSource=admin"
);

app.use(
  express.urlencoded({ limit: "50mb", extended: true, parameterLimit: 50000 })
);

app.use((req, res, next) => {
  if (!req.body) {
    req.body = {};
  }
  next();
});

app.use(baiguullagaRoute);
app.use(ajiltanRoute);
app.use(licenseRoute);
app.use(orshinSuugchRoute);
app.use(gereeRoute);
app.use(gereeniiZagvarRoute);
app.use(nekhemjlekhiinZagvarRoute);
app.use(bankniiGuilgeeRoute);
app.use(dansRoute);
app.use(ebarimtRoute);
app.use(nekhemjlekhRoute);
app.use("/nekhemjlekhCron", nekhemjlekhCronRoute);
app.use(qpayRoute);

app.use(aldaaBarigch);

// –ê–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –Ω—ç—Ö—ç–º–∂–ª—ç—Ö “Ø“Ø—Å–≥—ç—Ö —Ñ—É–Ω–∫—Ü (”©–¥”©—Ä –±“Ø—Ä —à”©–Ω–∏–π–Ω 12 —Ü–∞–≥—Ç –∞–∂–∏–ª–ª–∞–Ω–∞)
async function automataarNekhemjlekhUusgekh() {
  try {
    const { db } = require("zevbackv2");
    const Baiguullaga = require("./models/baiguullaga");
    const Geree = require("./models/geree");

    console.log(
      "=== –ê–í–¢–û–ú–ê–¢–ê–ê–† –ù–≠–•–≠–ú–ñ–õ–≠–• “Æ“Æ–°–ì–≠–• - ”®–î–†–ò–ô–ù –ê–ñ–ò–õ–õ–ê–ì–ê–ê –≠–•–≠–õ–õ–≠–≠ ==="
    );

    // –û–¥–æ–æ–≥–∏–π–Ω –æ–≥–Ω–æ–æ –∞–≤–∞—Ö
    const odoo = new Date();
    const nekhemjlekhUusgekhOgnoo = odoo.getDate();

    console.log(`”®–Ω”©”©–¥”©—Ä —Å–∞—Ä—ã–Ω ${nekhemjlekhUusgekhOgnoo} ”©–¥”©—Ä`);

    // ”®–Ω”©”©–¥—Ä–∏–π–Ω —Ö—É–≤—å–¥ –∏–¥—ç–≤—Ö—Ç—ç–π —Ç–æ—Ö–∏—Ä–≥–æ–æ–Ω—É—É–¥—ã–≥ –∞–≤–∞—Ö
    console.log("–•–∞–π–ª—Ç—ã–Ω –Ω”©—Ö—Ü”©–ª:", { nekhemjlekhUusgekhOgnoo: nekhemjlekhUusgekhOgnoo, idevkhitei: true });

    // Get all organizations first
    const baiguullaguud = await Baiguullaga(db.erunkhiiKholbolt).find({});
    console.log(`–û–ª–¥—Å–æ–Ω –±–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω —Ç–æ–æ: ${baiguullaguud.length}`);

    const tovchoonuud = [];

    // Check each organization for schedules
    for (const baiguullaga of baiguullaguud) {
      try {
        const tukhainBaaziinKholbolt = db.kholboltuud.find(
          (k) => k.baiguullagiinId === baiguullaga._id.toString()
        );

        if (!tukhainBaaziinKholbolt) {
          console.log(`–ë–∞–π–≥—É—É–ª–ª–∞–≥–∞ ${baiguullaga._id} —Ö–æ–ª–±–æ–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π`);
          continue;
        }

        const schedules = await NekhemjlekhCron(tukhainBaaziinKholbolt).find({
          nekhemjlekhUusgekhOgnoo: nekhemjlekhUusgekhOgnoo,
          idevkhitei: true,
        });

        for (const schedule of schedules) {
          tovchoonuud.push({
            ...schedule.toObject(),
            baiguullaga: baiguullaga,
          });
        }
      } catch (error) {
        console.log(
          `–ë–∞–π–≥—É—É–ª–ª–∞–≥–∞ ${baiguullaga._id} —à–∞–ª–≥–∞—Ö –∞–ª–¥–∞–∞:`,
          error.message
        );
      }
    }

    console.log(`–û–ª–¥—Å–æ–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ–Ω—É—É–¥—ã–Ω —Ç–æ–æ: ${tovchoonuud.length}`);
    console.log("–¢–æ—Ö–∏—Ä–≥–æ–æ–Ω—É—É–¥:", JSON.stringify(tovchoonuud, null, 2));

    if (tovchoonuud.length === 0) {
      console.log(
        `–°–∞—Ä—ã–Ω ${nekhemjlekhUusgekhOgnoo} ”©–¥—Ä–∏–π–Ω —Ö—É–≤—å–¥ –Ω—ç—Ö—ç–º–∂–ª—ç—Ö “Ø“Ø—Å–≥—ç—Ö —Ç–æ—Ö–∏—Ä–≥–æ–æ –æ–ª–¥—Å–æ–Ω–≥“Ø–π`
      );
      return;
    }

    console.log(
      `”®–Ω”©”©–¥—Ä–∏–π–Ω —Ö—É–≤—å–¥ ${tovchoonuud.length} –±–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ –æ–ª–¥–ª–æ–æ`
    );

    for (const tovchoo of tovchoonuud) {
      try {
        const baiguullaga = tovchoo.baiguullaga;
        console.log(
          `–ë–∞–π–≥—É—É–ª–ª–∞–≥–∞ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö: ${baiguullaga.ner} (${baiguullaga._id})`
        );

        const tukhainBaaziinKholbolt = db.kholboltuud.find(
          (k) => k.baiguullagiinId === baiguullaga._id.toString()
        );

        // Find ALL contracts for this organization
        const gereenuud = await Geree(tukhainBaaziinKholbolt).find({
          baiguullagiinId: baiguullaga._id.toString()
        });

        if (gereenuud.length === 0) {
          console.log(`${baiguullaga.ner}-–¥ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö –≥—ç—Ä—ç—ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π`);
          continue;
        }

        console.log(
          `${baiguullaga.ner}-–¥ ${gereenuud.length} –≥—ç—Ä—ç—ç –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö –æ–ª–¥–ª–æ–æ`
        );

        // Process in batches of 20 to handle large volumes efficiently
        const batchSize = 20;
        let processedCount = 0;
        let successCount = 0;
        let errorCount = 0;

        for (let i = 0; i < gereenuud.length; i += batchSize) {
          const batch = gereenuud.slice(i, i + batchSize);
          console.log(`üì¶ Processing batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(gereenuud.length / batchSize)} (${batch.length} contracts)`);
          
          // Process batch with controlled concurrency (max 10 at a time)
          const results = await Promise.allSettled(
            batch.map(geree => 
              nekhemjlekhController.gereeNeesNekhemjlekhUusgekh(
                geree,
                baiguullaga,
                tukhainBaaziinKholbolt,
                "automataar"
              )
            )
          );

          // Log results
          results.forEach((result, index) => {
            processedCount++;
            if (result.status === 'fulfilled' && result.value.success) {
              successCount++;
              const urdun = result.value;
              console.log(
                `‚úÖ [${processedCount}/${gereenuud.length}] –ì—ç—Ä—ç—ç ${urdun.gereeniiDugaar}-–¥ –Ω—ç—Ö—ç–º–∂–ª—ç—Ö “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç - –¢”©–ª–±”©—Ä: ${urdun.tulbur}‚ÇÆ`
              );
            } else {
              errorCount++;
              const error = result.status === 'rejected' ? result.reason : result.value.error;
              console.error(
                `‚ùå [${processedCount}/${gereenuud.length}] –ì—ç—Ä—ç—ç ${batch[index].gereeniiDugaar} –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö –∞–ª–¥–∞–∞:`,
                error
              );
            }
          });
        }

        console.log(`üìä ${baiguullaga.ner}: –¢”©–ª”©–≤ - Amjilttai: ${successCount}, Aldaa: ${errorCount}, Niit: ${processedCount}`);

        // –°“Ø“Ø–ª–∏–π–Ω –∞–∂–∏–ª–ª–∞—Å–∞–Ω –æ–≥–Ω–æ–æ —à–∏–Ω—ç—á–ª—ç—Ö
        await NekhemjlekhCron(tukhainBaaziinKholbolt).findByIdAndUpdate(
          tovchoo._id,
          {
            suuldAjillasanOgnoo: new Date(),
          }
        );
      } catch (baiguullagiinAldaa) {
        console.error(
          `‚ùå –ë–∞–π–≥—É—É–ª–ª–∞–≥–∞ ${tovchoo.baiguullagiinId} –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö –∞–ª–¥–∞–∞:`,
          baiguullagiinAldaa.message
        );
      }
    }

    console.log(
      "=== –ê–í–¢–û–ú–ê–¢–ê–ê–† –ù–≠–•–≠–ú–ñ–õ–≠–• “Æ“Æ–°–ì–≠–• - ”®–î–†–ò–ô–ù –ê–ñ–ò–õ–õ–ê–ì–ê–ê –î–£–£–°–°–ê–ù ==="
    );
  } catch (aldaa) {
    console.error("‚ùå –ê–í–¢–û–ú–ê–¢–ê–ê–† –ù–≠–•–≠–ú–ñ–õ–≠–• “Æ“Æ–°–ì–≠–• –ö–†–ò–¢–ò–ö –ê–õ–î–ê–ê:", aldaa);
  }
}

// ”®–¥”©—Ä –±“Ø—Ä 10:10 —Ü–∞–≥—Ç –∞–∂–∏–ª–ª–∞—Ö cron job
cron.schedule(
  "40 17 * * *", // ”®–¥”©—Ä –±“Ø—Ä 10:10 —Ü–∞–≥—Ç
  function () {
    automataarNekhemjlekhUusgekh();
  },
  {
    scheduled: true,
    timezone: "Asia/Ulaanbaatar",
  }
);

console.log(
  "üïê Cron job —Ç–æ—Ö–∏—Ä—É—É–ª–∞–≥–¥–ª–∞–∞: ”®–¥”©—Ä –±“Ø—Ä 10:10 —Ü–∞–≥—Ç –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –Ω—ç—Ö—ç–º–∂–ª—ç—Ö “Ø“Ø—Å–≥—ç—Ö"
);
